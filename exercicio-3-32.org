#+Title: Exercício 3.32

  *Enunciado:*
  
The procedures to be run during each time segment of the agenda are kept in a queue. Thus, the procedures for each segment are called 
in the order in which they were added to the agenda (first in, first out). Explain why this order must be used. In particular, trace 
the behavior of an and-gate whose inputs change from 0,1 to 1,0 in the same segment and say how the behavior would differ if we stored
a segment's procedures in an ordinary list, adding and removing procedures only at the front (last in, first out). 

  *Solução:*
  
A ordem das ações FIFO (/fisrt in, first out/) é importante pois devemos lidar com eventos simultâneos, que acontecem num mesmo =segment=.

Tomando como exemplo a chamada de =and-gate= com a mudança de 0,1 para 1,0, podemos ver no código implementado abaixo (as demais
funções estão implementadas nos outros arquivos) que o sinal de =out= muda duas vezes num mesmo =time=.

#+BEGIN_SRC scheme

(define (after-delay delay action)
  (add-to-agenda! (+ delay (current-time the-agenda)) ;tempo no qual and-action-procedure deve ser executada
                  action
                  the-agenda))

(define and-gate-delay 2)

(define (and-gate a1 a2 output)
  (define (and-action-procedure)
    (let ((new-value
           (logical-and (get-signal a1) (get-signal a2))))
      (after-delay and-gate-delay
                   (lambda ()
                     (set-signal! output new-value)))))
  (add-action! a1 and-action-procedure)
  (add-action! a2 and-action-procedure)
  'ok)
(define (logical-and s1 s2)
  (if (= s1 s2 1)
      1
      0))

(define in1 (make-wire))
(define in2 (make-wire))
(define out (make-wire))

> (and-gate in1 in2 out)
'ok
> (probe 'out out)
out 0  New-value = 0

> (set-signal! in1 1)
> (set-signal! in2 1)
> (set-signal! in1 0)
> (propagate)
out 2  New-value = 1
out 2  New-value = 0
#+END_SRC

A agenda é composta por =current-time=, o tempo passado desde que foi instanciada, e =segments=, o conjunto de ações separadas em 
queues para cada tempo no qual devem ser executadas. A função =add-to-agenda!= adiciona a ação e o =time= no =segment= que 
corresponde a esse respectivo =time= na agenda, e, se não houver, adiciona um novo =segment= na agenda anteriormente ao =segment= 
que tenha o menor tempo maior que =time=.

Como o conjunto de ações de cada =segment= é representado por um queue, garantimos que a ordem na qual as ações foram requeridas
seja preservada, assim, geramos o resultado correto. 

Ao mudarmos o sinal de =in1= e =in2=, adicionamos um =segment= à agenda, formado pelo =time= 2 e um =queue= que possui a ação de 
trocar o sinal de =out= para 1. 

Quando mudamos =in1= para 0 novamente, acrescentamos a ação de trocar o sinal de =out= para 0 a esse mesmo =segment=, pois ainda não instanciamos a agenda, 
logo, =current-time= ainda é 0. Dessa forma, as ações do =segment= - podemos obter as ações de um =segment= através da função 
=segment-queue= - estariam como:

#+BEGIN_SRC scheme
((lambda () (set-signal! output 1)) (lambda () (set-signal! output 0))
#+END_SRC

Se usássemos uma lista ao invés de um queue para representar o conjunto de ações de =segment=, cada ação nova seria adicionanda na 
frente da lista, logo, a ordem das ações seria FILO (/first in, last out/). 

Nesse exemplo, nosso conjunto de ações do =segment= que 
corresponde ao tempo 2 estaria como o código abaixo, realizando as ações na ordem contrária e não gerando o resultado correto.

#+BEGIN_SRC scheme
((lambda () (set-signal! output 0)) (lambda () (set-signal! output 1))

;resultado com lista
> (set-signal! in1 1)
> (set-signal! in2 1)
> (set-signal! in1 0)
> (propagate)
out 2  New-value = 1
#+END_SRC
