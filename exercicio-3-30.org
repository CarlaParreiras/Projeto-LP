#+Title: Exercício 3.30


*Enunciado:*

Figure 3.27 shows a ripple-carry adder formed by stringing together n full-adders. 
This is the simplest form of parallel adder for adding two n-bit binary numbers. 
The inputs A1, A2, A3, ..., An and B1, B2, B3, ..., Bn are the two binary numbers to be added (each Ak and Bk is a 0 or a 1). 
The circuit generates S1, S2, S3, ..., Sn, the n bits of the sum, and C, the carry from the addition. 
Write a procedure ripple-carry-adder that generates this circuit. 
The procedure should take as arguments three lists of n wires each -- the Ak, the Bk, and the Sk -- and also another wire C. 
The major drawback of the ripple-carry adder is the need to wait for the carry signals to propagate. 
What is the delay needed to obtain the complete output from an n-bit ripple-carry adder, 
expressed in terms of the delays for =and-gates=, =or-gates=, and =inverters=?

*Solução:*

Assumindo a existência da função =set-signal!= e dos blocos funcionais =or-gate=, =and-gate= e =inverter= (que já foram implementados em exercícios anteriores), podemos definir =ripple-carry-adder= como uma função que verifica se o =cdr= das listas A e B (representadas por =list-a= e =list-b=) está vazio e, caso verdadeiro, muda o sinal de =c= (carry) para 0; caso falso, ela faz uma recursão, chamando-se com o =cdr= de A, B e de S, e um novo wire =c-out=, e executa a função =full-adder= com o primeiro valor das listas A, B e S, o wire =c= e =c-out=.

Isso garante que estamos somando o valor Ak com Bk e que passamos o valor Ck para a próxima "casa", ou seja, para ser adicionado a Ak+1 e Bk+1. 

#+BEGIN_SRC scheme
(define (half-adder a b s c)
  (let ((d (make-wire)) (e (make-wire)))
    (or-gate a b d)
    (and-gate a b c)
    (inverter c e)
    (and-gate d e s)
    'ok))

(define (full-adder a b c-in sum c-out)
  (let ((s (make-wire))
        (c1 (make-wire))
        (c2 (make-wire)))
    (half-adder b c-in s c1)
    (half-adder a s sum c2)
    (or-gate c1 c2 c-out)
    'ok))

(define (ripple-carry-adder list-a list-b list-s c) 
  (let ((c-out (make-wire))) 
    (if (null? (cdr list-a))
        (set-signal! c 0)
        (ripple-carry-adder (cdr list-a) (cdr list-b) (cdr list-s) c-out)) 
    (full-adder (car list-a) (car list-b) c-out (car list-s) c)))
#+END_SRC 
